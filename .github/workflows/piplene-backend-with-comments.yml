name: BSN Backend API Pipeline  # Название этого workflow.

on:  # События, которые запускают workflow.
  push:  # Запуск при push'е в репозиторий.
    branches:  # Ветки, на которых запускается workflow.
      - ci/pipeline
    paths:  # Пути к файлам, за изменением которых следит workflow.
      - book-network/**  # Все файлы и папки внутри `book-network`.
      - docker/backend/**  # Все файлы и папки внутри `docker/backend`.
      - 'docker-compose.yml'  # Файл docker-compose.yml.
      - .github/workflows/*-backend.yml  # Все файлы workflow'ов с суффиксом '-backend.yml' в папке .github/workflows.

jobs:  # Определение задач (jobs), которые должны быть выполнены workflow'ом.

  compile:  # Задача для компиляции проекта.
    runs-on: self-hosted  # Задача запускается на собственной инфраструктуре.
    name: Compile project  # Название задачи.
    steps:  # Шаги, которые необходимо выполнить в рамках задачи.

      - name: Checkout code  # Шаг: Получение кода.
        uses: actions/checkout@v4  # Использование действия (action) для получения кода.
        with:
          fetch-depth: 0  # Получение полной истории коммитов.

      - name: Setup JDK  # Шаг: Установка JDK.
        uses: actions/setup-jdk@v4  # Использование действия для установки JDK.
        with:
          java-version: 17  # Установка версии JDK.
          distribution: 'corretto'  # Выбор дистрибутива JDK.

      - name: Compile project  # Шаг: Компиляция проекта.
        run: |
          cd book-network  # Переход в папку с проектом.
          ./mvnw clean compile  # Запуск сборки проекта с использованием Maven.

  unit-tests:  # Задача для запуска юнит-тестов.
    runs-on: self-hosted  # Задача запускается на собственной инфраструктуре.
    name: Unit tests  # Название задачи.
    steps:  # Шаги, которые необходимо выполнить в рамках задачи.

      - name: Checkout code  # Шаг: Получение кода.
        uses: actions/checkout@v4  # Использование действия для получения кода.
        with:
          fetch-depth: 0  # Получение полной истории коммитов.

      - name: Setup JDK  # Шаг: Установка JDK.
        uses: actions/setup-jdk@v4  # Использование действия для установки JDK.
        with:
          java-version: 17  # Установка версии JDK.
          distribution: 'corretto'  # Выбор дистрибутива JDK.

      - name: Running unit Tests  # Шаг: Запуск юнит-тестов.
        run: |
          cd book-network  # Переход в папку с проектом.
          ./mvnw clean test  # Запуск юнит-тестов с использованием Maven.

  build:  # Задача для сборки проекта.
    runs-on: self-hosted  # Задача запускается на собственной инфраструктуре.
    name: Build backend  # Название задачи.
    needs: [ compile, unit-tests ]  # Зависимости задачи (необходимо завершить compile и unit-tests перед запуском этой задачи).
    steps:  # Шаги, которые необходимо выполнить в рамках задачи.

      - name: Checkout code  # Шаг: Получение кода.
        uses: actions/checkout@v4  # Использование действия для получения кода.
        with:
          fetch-depth: 0  # Получение полной истории коммитов.

      - name: Setup JDK  # Шаг: Установка JDK.
        uses: actions/setup-jdk@v4  # Использование действия для установки JDK.
        with:
          java-version: 17  # Установка версии JDK.
          distribution: 'corretto'  # Выбор дистрибутива JDK.

      - name: Build project  # Шаг: Сборка проекта.
        run: |
          cd book-network  # Переход в папку с проектом.
          ./mvnw clean package  # Запуск сборки проекта с использованием Maven.

  build-image:  # Задача для сборки Docker-образа.
    name: Build Docker image  # Название задачи.
    runs-on: self-hosted  # Задача запускается на собственной инфраструктуре.
    needs: [ build ]  # Зависимости задачи (необходимо завершить build перед запуском этой задачи).
    steps:  # Шаги, которые необходимо выполнить в рамках задачи.

      - name: Checkout code  # Шаг: Получение кода.
        uses: actions/checkout@v4  # Использование действия для получения кода.
        with:
          fetch-depth: 0  # Получение полной истории коммитов.

      - name: Setup JDK  # Шаг: Установка JDK.
        uses: actions/setup-jdk@v4  # Использование действия для установки JDK.
        with:
          java-version: 17  # Установка версии JDK.
          distribution: 'corretto'  # Выбор дистрибутива JDK.

      - name: Build project  # Шаг: Сборка проекта.
        run: |
          cd book-network  # Переход в папку с проектом.
          ./mvnw clean package  # Запуск сборки проекта с использованием Maven.

      - name: Extract project version  # Шаг: Извлечение версии проекта.
        id: extract_version  # Уникальный идентификатор шага.
        run: |
          cd book-network  # Переход в папку с проектом.
          echo "VERSION=$(./mvnw -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec)" >> $GITHUB_OUTPUT  # Извлечение версии проекта и запись в переменную окружения.

      - name: Login to DockerHub  # Шаг: Авторизация в DockerHub.
        uses: docker/login-action@v3  # Использование действия для авторизации.
        with:
          username: ${{secrets.DOCKERHUB_USERNAME}}  # Имя пользователя DockerHub.
          password: ${{secrets.DOCKERHUB_TOKEN}}  # Токен DockerHub.

      - name: Build & Push to DockerHub  # Шаг: Сборка и публикация Docker-образа в DockerHub.
        uses: docker/build-push-action@v5  # Использование действия для сборки и публикации образа.
        with:
          context: book-network  # Директория контекста сборки.
          file: docker/backend/Dockerfile  # Путь к Dockerfile.
          push: true  # Флаг, указывающий на необходимость публикации образа.
          platforms: linux/amd64  # Платформа образа.
          tags: ${{secrets.DOCKERHUB_USERNAME}}/bsn-api:${{ steps.extract_version.outputs.VERSION }},b${{secrets.DOCKERHUB_USERNAME}}/bsn-api:latest  # Теги для образа.
          build-args: |  # Аргументы сборки.
            PROFILE=dev  # Профиль сборки.
            APP_VERSION= ${{ steps.extract_version.outputs.VERSION }}  # Версия приложения.

  deploy:  # Задача для деплоя бэкэнда.
    name: Deploy backend  # Название задачи.
    runs-on: self-hosted  # Задача запускается на собственной инфраструктуре.
    needs: [build-image]  # Зависимости задачи (необходимо завершить build-image перед запуском этой задачи).
    steps:  # Шаги, которые необходимо выполнить в рамках задачи.

      - name: Create deployment folder  # Шаг: Создание папки для деплоя.
        run: ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} "mkdir -p ci-cd"  # Создание папки на сервере.

      - name: Copy docker-compose file  # Шаг: Копирование файла docker-compose.
        run: scp docker-compose.yml ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }}:ci-cd/docker-compose.yml  # Копирование файла на сервер.

      - name: Set ENV variables and deploy  # Шаг: Установка переменных окружения и деплой.
        run: |
          ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_VPS_IP }} <<EOF  # Подключение к серверу по SSH.
          export EMAIL_HOST_NAME=${{ secrets.EMAIL_HOST_NAME }}  # Установка переменной окружения EMAIL_HOST_NAME.
          export EMAIL_USER_NAME=${{ secrets.EMAIL_USER_NAME }}  # Установка переменной окружения EMAIL_USER_NAME.
          export EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}  # Установка переменной окружения EMAIL_PASSWORD.
          cd ci-cd  # Переход в папку с docker-compose файлом.
          docker-compose -f docker-compose.yml pull -q  # Обновление Docker образов.
          docker-compose -f docker-compose.yml up -d  # Запуск контейнеров в фоновом режиме.
          EOF
