name: BSN Backend API Pipeline

on:
  push:
    branches:
      - main
    paths:
      - book-network/**
      - docker/backend/**
      - 'docker-compose.yml'
      - .github/workflows/*-backend.yml

jobs:
  compile:
    runs-on: self-hosted
    name: Compile project
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Make mvnw executable
        run: |
          cd book-network
          chmod +x mvnw

      - name: Compile project
        run: |
          cd book-network
          echo "Compiling project..."
          ./mvnw clean compile

  unit-tests:
    runs-on: self-hosted
    name: Unit tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Make mvnw executable
        run: |
          cd book-network
          chmod +x mvnw

      - name: Running unit Tests
        run: |
          cd book-network
          echo "Running unit tests..."
          ./mvnw clean test

  build:
    runs-on: self-hosted
    name: Build backend
    needs: [ compile, unit-tests ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Make mvnw executable
        run: |
          cd book-network
          chmod +x mvnw

      - name: Build project
        run: |
          cd book-network
          echo "Building project..."
          ./mvnw clean package

  build-image:
    name: Build Docker image
    runs-on: self-hosted
    needs: [ build ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Make mvnw executable
        run: |
          cd book-network
          chmod +x mvnw

      - name: Build project for Docker image
        run: |
          cd book-network
          echo "Building project for Docker image..."
          ./mvnw clean package

      - name: Extract project version
        id: extract_version
        run: |
          cd book-network
          echo "Extracting project version..."
          VERSION=$(./mvnw -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_TOKEN}}

      - name: Build & Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: book-network
          file: docker/backend/Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{secrets.DOCKERHUB_USERNAME}}/bsn-api:${{ env.VERSION }},${{secrets.DOCKERHUB_USERNAME}}/bsn-api:latest
          build-args: |
            PROFILE=dev
            APP_VERSION=${{ env.VERSION }}

  deploy:
    name: Deploy backend
    runs-on: self-hosted
    needs: [build-image]
    steps:
      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          ssh-keyscan -p ${{ secrets.VPS_PORT }} ${{ secrets.VPS_IP }} >> ~/.ssh/known_hosts

      - name: Create deployment folder
        run: |
          echo "Creating deployment folder on server..."
          ssh -p ${{ secrets.VPS_PORT }} ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} "mkdir -p ci-cd" || (echo "Error during SSH command" && exit 1)

      - name: Copy docker-compose file
        run: |
          echo "Copying docker-compose file to server..."
          scp -P ${{ secrets.VPS_PORT }} docker-compose.yml ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }}:ci-cd/docker-compose.yml || (echo "Error during SCP command" && exit 1)

      - name: Set ENV variables and deploy
        run: |
          echo "Setting environment variables and deploying..."
          ssh -p ${{ secrets.VPS_PORT }} ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} <<EOF
          export EMAIL_HOST_NAME=${{ secrets.EMAIL_HOST_NAME }}
          export EMAIL_USER_NAME=${{ secrets.EMAIL_USER_NAME }}
          export EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}
          cd ci-cd
          docker-compose -f docker-compose.yml pull -q
          docker-compose -f docker-compose.yml up -d
          EOF
